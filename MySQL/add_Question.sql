use quiz;
-- category Table --
INSERT INTO category VALUES (1, "JAVA", "Basic Java Quiz");
INSERT INTO category VALUES (2, "SPRING", "Java Spring Framework Quiz");
INSERT INTO category VALUES (3, "OOP", "Object Oriented Programming Quiz");

-- question & answer--
-- JAVA
-- 1
INSERT INTO question VALUES(1, 1, "Which statement is true about Java?", "ACTIVE");
INSERT INTO choice VALUES(1, 1, "Java is a sequence-dependent programming language", 0);
INSERT INTO choice VALUES(2, 1, "Java is a code dependent programming language", 0);
INSERT INTO choice VALUES(3, 1, "Java is a platform-dependent programming language", 0);
INSERT INTO choice VALUES(4, 1, "Java is a platform-independent programming language", 1);

-- 2
INSERT INTO question VALUES(2, 1, "Which one of the following is not a Java feature?", "ACTIVE");
INSERT INTO choice VALUES(5, 2, "Object-oriented", 0);
INSERT INTO choice VALUES(6, 2, "Use of pointers", 1);
INSERT INTO choice VALUES(7, 2, "Portable", 0);
INSERT INTO choice VALUES(8, 2, "Dynamic and Extensible", 0);

-- 3
INSERT INTO question VALUES(3, 1, "What is the extension of java code files?", "ACTIVE");
INSERT INTO choice VALUES(9, 3, ".js", 0);
INSERT INTO choice VALUES(10, 3, ".txt", 0);
INSERT INTO choice VALUES(11, 3, ".class", 0);
INSERT INTO choice VALUES(12, 3, ".java", 1);

-- 4
INSERT INTO question VALUES(4, 1, "What is not the use of “this” keyword in Java?", "ACTIVE");
INSERT INTO choice VALUES(13, 4, "Referring to the instance variable when a local variable has the same name", 0);
INSERT INTO choice VALUES(14, 4, "Passing itself to the method of the same class", 1);
INSERT INTO choice VALUES(15, 4, "Passing itself to another method", 0);
INSERT INTO choice VALUES(16, 4, "Calling another constructor in constructor chaining", 0);

-- 5
INSERT INTO question VALUES(5, 1, "Which exception is thrown when java is out of memory?", "ACTIVE");
INSERT INTO choice VALUES(17, 5, "MemoryError", 0);
INSERT INTO choice VALUES(18, 5, "OutOfMemoryError", 1);
INSERT INTO choice VALUES(19, 5, "MemoryOutOfBoundsException", 0);
INSERT INTO choice VALUES(20, 5, "MemoryFullException", 0);

-- 6
INSERT INTO question VALUES(6, 1, "Which of the following is a superclass of every class in Java?", "ACTIVE");
INSERT INTO choice VALUES(21, 6, "ArrayList", 0);
INSERT INTO choice VALUES(22, 6, "Abstract class", 0);
INSERT INTO choice VALUES(23, 6, "Object class", 1);
INSERT INTO choice VALUES(24, 6, "String", 0);

-- 7
INSERT INTO question VALUES(7, 1, "Which of these statements is incorrect about Thread?", "ACTIVE");
INSERT INTO choice VALUES(25, 7, "start() method is used to begin execution of the thread", 0);
INSERT INTO choice VALUES(26, 7, "run() method is used to begin execution of a thread before start() method in special cases", 1);
INSERT INTO choice VALUES(27, 7, "A thread can be formed by implementing Runnable interface", 0);
INSERT INTO choice VALUES(28, 7, "A thread can be formed by a class that extends Thread class", 0);

-- 8
INSERT INTO question VALUES(8, 1, "What is the extension of compiled java class?", "ACTIVE");
INSERT INTO choice VALUES(29, 8, ".js", 0);
INSERT INTO choice VALUES(30, 8, ".txt", 0);
INSERT INTO choice VALUES(31, 8, ".class", 1);
INSERT INTO choice VALUES(32, 8, ".java", 0);

-- 9
INSERT INTO question VALUES(9, 1, "Which of these keywords are used for the block to be examined for exceptions?", "ACTIVE");
INSERT INTO choice VALUES(33, 9, "throw", 0);
INSERT INTO choice VALUES(34, 9, "check", 0);
INSERT INTO choice VALUES(35, 9, "catch", 0);
INSERT INTO choice VALUES(36, 9, "try", 1);

-- 10
INSERT INTO question VALUES(10, 1, "What is the numerical range of a char data type in Java?", "ACTIVE");
INSERT INTO choice VALUES(37, 10, "0 to 256", 0);
INSERT INTO choice VALUES(38, 10, "-128 to 127", 0);
INSERT INTO choice VALUES(39, 10, "0 to 65535", 1);
INSERT INTO choice VALUES(40, 10, "0 to 32767", 0);

-- 11
INSERT INTO question VALUES(11, 1, "Which of this keyword can be used in a subclass to call the constructor of superclass?", "ACTIVE");
INSERT INTO choice VALUES(41, 11, "super", 0);
INSERT INTO choice VALUES(42, 11, "this", 0);
INSERT INTO choice VALUES(43, 11, "extend", 0);
INSERT INTO choice VALUES(44, 11, "extends", 1);

-- 12
INSERT INTO question VALUES(12, 1, "Which of the following are not Java keywords", "ACTIVE");
INSERT INTO choice VALUES(45, 12, "double", 0);
INSERT INTO choice VALUES(46, 12, "switch", 0);
INSERT INTO choice VALUES(47, 12, "then", 1);
INSERT INTO choice VALUES(48, 12, "instanceof", 0);

-- 13
INSERT INTO question VALUES(13, 1, "What is byte code in Java?", "ACTIVE");
INSERT INTO choice VALUES(49, 13, "Code generated by a Java compiler", 1);
INSERT INTO choice VALUES(50, 13, "Code generated by a Java Virtual Machine", 0);
INSERT INTO choice VALUES(51, 13, "Name of Java source code file", 0);
INSERT INTO choice VALUES(52, 13, "Block of code written inside a class", 0);

-- 14
INSERT INTO question VALUES(14, 1, "In java control statements break, continue, return, try-catch-finally and assert belongs to?", "ACTIVE");
INSERT INTO choice VALUES(53, 14, "Selection statements", 0);
INSERT INTO choice VALUES(54, 14, "Loop Statements", 0);
INSERT INTO choice VALUES(55, 14, "Transfer statements", 1);
INSERT INTO choice VALUES(56, 14, "Pause Statement", 0);

-- 15
INSERT INTO question VALUES(15, 1, "Which of these have highest precedence?", "ACTIVE");
INSERT INTO choice VALUES(57, 15, "()", 1);
INSERT INTO choice VALUES(58, 15, "++", 0);
INSERT INTO choice VALUES(59, 15, "*", 0);
INSERT INTO choice VALUES(60, 15, ">>", 0);

-- 16
INSERT INTO question VALUES(16, 1, "Which variables are created when an object is created with the use of the keyword 'new' and destroyed when the object is destroyed?", "ACTIVE");
INSERT INTO choice VALUES(61, 16, "Local variables", 0);
INSERT INTO choice VALUES(62, 16, "Instance variables", 1);
INSERT INTO choice VALUES(63, 16, "Class variables", 0);
INSERT INTO choice VALUES(64, 16, "Static variables", 0);

-- 17
INSERT INTO question VALUES(17, 1, "What is garbage collection in the context of Java?", "ACTIVE");
INSERT INTO choice VALUES(65, 17, "Java deletes all unused java files on the system.", 0);
INSERT INTO choice VALUES(66, 17, "Memory used by the object with no reference is automatically reclaimed.", 1);
INSERT INTO choice VALUES(67, 17, "The JVM cleans output of Java program with error.", 0);
INSERT INTO choice VALUES(68, 17, "Any unused package in a program automatically gets deleted.", 0);

-- 18
INSERT INTO question VALUES(18, 1, "Which one is a template for creating different objects ?", "ACTIVE");
INSERT INTO choice VALUES(69, 18, "An Array", 0);
INSERT INTO choice VALUES(70, 18, "Interface", 0);
INSERT INTO choice VALUES(71, 18, "Method", 0);
INSERT INTO choice VALUES(72, 18, "A class", 1);

-- 19
INSERT INTO question VALUES(19, 1, "Which one is true about a constructor?", "ACTIVE");
INSERT INTO choice VALUES(73, 19, "A constructor must have the same name as the class it is declared within.", 0);
INSERT INTO choice VALUES(74, 19, "A constructor is used to create objects.", 0);
INSERT INTO choice VALUES(75, 19, "A constructor may be declared private", 0);
INSERT INTO choice VALUES(76, 19, "All of the above", 1);

-- 20 (OOP)
INSERT INTO question VALUES(20, 3, "What feature of OOP has a super-class sub-class concept?", "ACTIVE");
INSERT INTO choice VALUES(77, 20, "Hierarchical inheritance", 1);
INSERT INTO choice VALUES(78, 20, "Single inheritance", 0);
INSERT INTO choice VALUES(79, 20, "Multiple inheritances", 0);
INSERT INTO choice VALUES(80, 20, "Multilevel inheritance", 0);

-- 21
INSERT INTO question VALUES(21, 1, "Which of the following are not the methods of the Thread class?", "ACTIVE");
INSERT INTO choice VALUES(81, 21, "yield()", 0);
INSERT INTO choice VALUES(82, 21, "sleep(long msec)", 0);
INSERT INTO choice VALUES(83, 21, "go()", 1);
INSERT INTO choice VALUES(84, 21, "stop()", 0);


-- Spring 
-- 22
INSERT INTO question VALUES(22, 2, "Beans can be created by which of the following properties?", "ACTIVE");
INSERT INTO choice VALUES(85, 22, "Scope", 0);
INSERT INTO choice VALUES(86, 22, "Property", 0);
INSERT INTO choice VALUES(87, 22, "Class", 0);
INSERT INTO choice VALUES(88, 22, "It’s own constructor", 1);

-- 23
INSERT INTO question VALUES(23, 2, "Which attribute is used to specify class name of the bean?", "ACTIVE");
INSERT INTO choice VALUES(89, 23, "name", 0);
INSERT INTO choice VALUES(90, 23, "id", 0);
INSERT INTO choice VALUES(91, 23, "class", 1);
INSERT INTO choice VALUES(92, 23, "constructor-args", 0);

-- 24
INSERT INTO question VALUES(24, 2, "Which configuration can be used for Dependency Injection?", "ACTIVE");
INSERT INTO choice VALUES(93, 24, "XML Configuration", 0);
INSERT INTO choice VALUES(94, 24, "Annotation Configuration", 0);
INSERT INTO choice VALUES(95, 24, "Java Based Configuration", 0);
INSERT INTO choice VALUES(96, 24, "All of the mentioned", 1);

-- 25
INSERT INTO question VALUES(25, 2, "Which one is the default scope of the beans?", "ACTIVE");
INSERT INTO choice VALUES(97, 25, "Prototype", 0);
INSERT INTO choice VALUES(98, 25, "Session", 0);
INSERT INTO choice VALUES(99, 25, "Request", 0);
INSERT INTO choice VALUES(100, 25, "Singleton", 1);

-- 26
INSERT INTO question VALUES(26, 2, "Which of the following is advice supported by Aspect Annotation?", "ACTIVE");
INSERT INTO choice VALUES(101, 26, "@Before", 0);
INSERT INTO choice VALUES(102, 26, "@After", 0);
INSERT INTO choice VALUES(103, 26, "@AfterReturning", 0);
INSERT INTO choice VALUES(104, 26, "All of the mentioned", 1);

-- 27
INSERT INTO question VALUES(27, 2, "To publish a REST service with Spring: ", "ACTIVE");
INSERT INTO choice VALUES(105, 27, "publishing an application’s data as a REST service", 0);
INSERT INTO choice VALUES(106, 27, "accessing data from third-party REST service", 0);
INSERT INTO choice VALUES(107, 27, "none of the mentioned", 0);
INSERT INTO choice VALUES(108, 27, "all of the mentioned", 1);

-- 28
INSERT INTO question VALUES(28, 2, "Publishing an application’s data as a REST service requires: ", "ACTIVE");
INSERT INTO choice VALUES(109, 28, "@RequestMapping", 0);
INSERT INTO choice VALUES(110, 28, "@PathVariable", 0);
INSERT INTO choice VALUES(111, 28, "ALl of the mentioned", 1);
INSERT INTO choice VALUES(112, 28, "None of the mentioned", 0);

-- 29
INSERT INTO question VALUES(29, 2, "RestTemplate class method which performs an HTTP HEAD operation?", "ACTIVE");
INSERT INTO choice VALUES(113, 29, "headForHeaders(String, Object…)", 1);
INSERT INTO choice VALUES(114, 29, "getForObject(String, Class, Object…)", 0);
INSERT INTO choice VALUES(115, 29, "postForLocation(String, Object, Object…)", 0);
INSERT INTO choice VALUES(116, 29, "postForObject(String, Object, Class, Object…)", 0);

-- 30
INSERT INTO question VALUES(30, 2, "Database Engine which uses low memory consumption and easy configuration?", "ACTIVE");
INSERT INTO choice VALUES(117, 30, "SQL", 0);
INSERT INTO choice VALUES(118, 30, "MySQL", 0);
INSERT INTO choice VALUES(119, 30, "Apache Derby", 1);
INSERT INTO choice VALUES(120, 30, "None of the mentioned", 0);

-- 31
INSERT INTO question VALUES(31, 2, "JDBC Properties for Connecting to the Application Database: ", "ACTIVE");
INSERT INTO choice VALUES(121, 31, "Driver Class", 0);
INSERT INTO choice VALUES(122, 31, "URL", 0);
INSERT INTO choice VALUES(123, 31, "Username", 0);
INSERT INTO choice VALUES(124, 31, "All of the mentioned", 1);

-- 32
INSERT INTO question VALUES(32, 2, "To access the database with JDBC:", "ACTIVE");
INSERT INTO choice VALUES(125, 32, "DAO Interface", 1);
INSERT INTO choice VALUES(126, 32, "DAO Class", 0);
INSERT INTO choice VALUES(127, 32, "DataAccess Interface", 0);
INSERT INTO choice VALUES(128, 32, "None of the mentioned", 0);

-- 33
INSERT INTO question VALUES(33, 2, "Standard interface defined by the JDBC specification that factories Connection instances:", "ACTIVE");
INSERT INTO choice VALUES(129, 33, "javax.sql.DataAccess", 0);
INSERT INTO choice VALUES(130, 33, "javax.sql.DataSource", 1);
INSERT INTO choice VALUES(131, 33, "javax.sql.Data", 0);
INSERT INTO choice VALUES(132, 33, "javax.sql.DataSourceAccess", 0);

-- 34
INSERT INTO question VALUES(34, 2, "Sessionfactory can manage contextual sessions for you and allows you to retrieve them by the:", "ACTIVE");
INSERT INTO choice VALUES(133, 34, "getSession() method", 0);
INSERT INTO choice VALUES(134, 34, "getCurrent() method", 0);
INSERT INTO choice VALUES(135, 34, "getCurrentSession() method", 1);
INSERT INTO choice VALUES(136, 34, "none of the mentioned", 0);

-- 35
INSERT INTO question VALUES(35, 2, "Annotation to find a transaction and then fail, complaining that no Hibernate session been bound to the thread:", "ACTIVE");
INSERT INTO choice VALUES(137, 35, "@Transaction", 0);
INSERT INTO choice VALUES(138, 35, "@Transactional", 1);
INSERT INTO choice VALUES(139, 35, "@Transactions", 0);
INSERT INTO choice VALUES(140, 35, "None of the mentioned", 0);

-- 36
INSERT INTO question VALUES(36, 2, "Spring provides to simplify your DAO implementation by managing entitymanagers and transactions for you:", "ACTIVE");
INSERT INTO choice VALUES(141, 36, "HibernateTemplate", 0);
INSERT INTO choice VALUES(142, 36, "JpaTemplate", 1);
INSERT INTO choice VALUES(143, 36, "SpringTemplate", 0);
INSERT INTO choice VALUES(144, 36, "None of the mentioned", 0);

-- 37
INSERT INTO question VALUES(37, 2, "Annotation used for entity manager injection in EJB components.", "ACTIVE");
INSERT INTO choice VALUES(145, 37, "@PersistenceContext", 1);
INSERT INTO choice VALUES(146, 37, "@Persistence", 0);
INSERT INTO choice VALUES(147, 37, "@PersistenceCon", 0);
INSERT INTO choice VALUES(148, 37, "None of the mentioned", 0);

-- 38
INSERT INTO question VALUES(38, 2, "Annotation for Hibernate exceptions to be translated into Spring DataAccessException for consistent exception handling", "ACTIVE");
INSERT INTO choice VALUES(149, 38, "@Translation", 0);
INSERT INTO choice VALUES(150, 38, "@Repo", 0);
INSERT INTO choice VALUES(151, 38, "@Repository", 1);
INSERT INTO choice VALUES(152, 38, "None of the mentioned", 0);

-- 39
INSERT INTO question VALUES(39, 2, "Method that allows you to start a new transaction (or obtain the currently active transaction):", "ACTIVE");
INSERT INTO choice VALUES(153, 39, "getTransaction()", 1);
INSERT INTO choice VALUES(154, 39, "commit()", 0);
INSERT INTO choice VALUES(155, 39, "rollback()", 0);
INSERT INTO choice VALUES(156, 39, "All of the mentioned", 0);

-- 40
INSERT INTO question VALUES(40, 2, "To help you control the overall transaction management process and transaction exception handling:", "ACTIVE");
INSERT INTO choice VALUES(157, 40, "SpringTransactionTemplate", 0);
INSERT INTO choice VALUES(158, 40, "TransactionTemplate", 1);
INSERT INTO choice VALUES(159, 40, "Transaction", 0);
INSERT INTO choice VALUES(160, 40, "None of the mentioned", 0);


-- 41
INSERT INTO question VALUES(41, 2, "Spring’s core transaction management abstraction is based on the interface:", "ACTIVE");
INSERT INTO choice VALUES(161, 41, "PlatformTransaction", 0);
INSERT INTO choice VALUES(162, 41, "PlatformTransactionManager", 1);
INSERT INTO choice VALUES(163, 41, "TransactionManager", 0);
INSERT INTO choice VALUES(164, 41, "PlatformManager", 0);

-- 42
INSERT INTO question VALUES(42, 3, "Who invented OOP?", "ACTIVE");
INSERT INTO choice VALUES(165, 42, "Andrea Ferro", 0);
INSERT INTO choice VALUES(166, 42, "Adele Goldberg", 0);
INSERT INTO choice VALUES(167, 42, "Alan Kay", 1);
INSERT INTO choice VALUES(168, 42, "Dennis Ritchie", 0);

-- 43
INSERT INTO question VALUES(43, 3, "Which is not a feature of OOP in general definitions?", "ACTIVE");
INSERT INTO choice VALUES(169, 43, "Efficient Code", 0);
INSERT INTO choice VALUES(170, 43, "Code resusability", 0);
INSERT INTO choice VALUES(171, 43, "Modularity", 0);
INSERT INTO choice VALUES(172, 43, "Duplicate/Redundant data", 1);

-- 44
INSERT INTO question VALUES(44, 3, "Which feature of OOP indicates code reusability?", "ACTIVE");
INSERT INTO choice VALUES(173, 44, "Referring to the instance variable when a local variable has the same name", 0);
INSERT INTO choice VALUES(174, 44, "Passing itself to the method of the same class", 1);
INSERT INTO choice VALUES(175, 44, "Passing itself to another method", 0);
INSERT INTO choice VALUES(176, 44, "Calling another constructor in constructor chaining", 0);

-- 45
INSERT INTO question VALUES(45, 3, "Which exception is thrown when java is out of memory?", "ACTIVE");
INSERT INTO choice VALUES(177, 45, "Abstraction", 0);
INSERT INTO choice VALUES(178, 45, "Polymorphism", 0);
INSERT INTO choice VALUES(179, 45, "Encapsulation", 0);
INSERT INTO choice VALUES(180, 45, "Inheritance", 1);

-- 46
INSERT INTO question VALUES(46, 3, "Why Java is Partially OOP language?", "ACTIVE");
INSERT INTO choice VALUES(181, 46, "It allows code to be written outside classes", 0);
INSERT INTO choice VALUES(182, 46, "It supports usual declaration of primitive data types", 1);
INSERT INTO choice VALUES(183, 46, "It does not support pointers", 0);
INSERT INTO choice VALUES(184, 46, "It doesn’t support all types of inheritance", 0);

-- 47
INSERT INTO question VALUES(47, 3, "Which among the following doesn’t come under OOP concept?", "ACTIVE");
INSERT INTO choice VALUES(185, 47, "Data hiding", 0);
INSERT INTO choice VALUES(186, 47, "Message passing", 0);
INSERT INTO choice VALUES(187, 47, "Platform independent", 1);
INSERT INTO choice VALUES(188, 47, "Data binding", 0);

-- 48
INSERT INTO question VALUES(48, 3, "The feature by which one object can interact with another object is:", "ACTIVE");
INSERT INTO choice VALUES(189, 48, "Message reading", 0);
INSERT INTO choice VALUES(190, 48, "Message Passing", 1);
INSERT INTO choice VALUES(191, 48, "Data transfer", 0);
INSERT INTO choice VALUES(192, 48, "Data binding", 0);

-- 49
INSERT INTO question VALUES(49, 3, "What is encapsulation in OOP", "ACTIVE");
INSERT INTO choice VALUES(193, 49, "It is a way of combining various data members and member functions that operate on those data members into a single unit", 1);
INSERT INTO choice VALUES(194, 49, "It is a way of combining various data members and member functions into a single unit which can operate on any data", 0);
INSERT INTO choice VALUES(195, 49, "It is a way of combining various data members into a single unit", 0);
INSERT INTO choice VALUES(196, 49, "It is a way of combining various member functions into a single unit", 0);

-- 50
INSERT INTO question VALUES(50, 3, "What is an abstraction in object-oriented programming?", "ACTIVE");
INSERT INTO choice VALUES(197, 50, "Hiding the implementation and showing only the features", 1);
INSERT INTO choice VALUES(198, 50, "Hiding the important data", 0);
INSERT INTO choice VALUES(199, 50, "Hiding the implementation", 0);
INSERT INTO choice VALUES(200, 50, "Showing the important data", 0);

-- 51
INSERT INTO question VALUES(51, 3, "In which access should a constructor be defined, so that object of the class can be created in any function?", "ACTIVE");
INSERT INTO choice VALUES(201, 51, "Any access specifier will work", 0);
INSERT INTO choice VALUES(202, 51, "Private", 0);
INSERT INTO choice VALUES(203, 51, "Public", 1);
INSERT INTO choice VALUES(204, 51, "Protected", 0);

-- 52
INSERT INTO question VALUES(52, 3, "Which feature can be implemented using encapsulation?", "ACTIVE");
INSERT INTO choice VALUES(205, 52, "Polymorphism", 0);
INSERT INTO choice VALUES(206, 52, "Overloading", 0);
INSERT INTO choice VALUES(207, 52, "Inheritance", 0);
INSERT INTO choice VALUES(208, 52, "Abstraction", 1);

-- 53
INSERT INTO question VALUES(53, 3, "Instance of which type of class can’t be created?", "ACTIVE");
INSERT INTO choice VALUES(209, 53, "Parent class", 0);
INSERT INTO choice VALUES(210, 53, "Abstract class", 1);
INSERT INTO choice VALUES(211, 53, "Anonymous class", 0);
INSERT INTO choice VALUES(212, 53, "Nested class", 0);

-- 54
INSERT INTO question VALUES(54, 3, "If data members are private, what can we do to access them from the class object?", "ACTIVE");
INSERT INTO choice VALUES(213, 54, "Private data members can never be accessed from outside the class", 0);
INSERT INTO choice VALUES(214, 54, "Create public member functions to access those data members", 1);
INSERT INTO choice VALUES(215, 54, "Create private member functions to access those data members", 0);
INSERT INTO choice VALUES(216, 54, "Create protected member functions to access those data members", 0);

-- 55
INSERT INTO question VALUES(55, 3, "Which among the following is not a necessary condition for constructors?", "ACTIVE");
INSERT INTO choice VALUES(217, 55, "Its name must be same as that of class", 0);
INSERT INTO choice VALUES(218, 55, "It must not have any return type", 0);
INSERT INTO choice VALUES(219, 55, "It must contain a definition body", 1);
INSERT INTO choice VALUES(220, 55, "It can contains arguments", 0);

-- 56
INSERT INTO question VALUES(56, 3, "Which keyword should be used to declare static variables?", "ACTIVE");
INSERT INTO choice VALUES(221, 56, "final", 0);
INSERT INTO choice VALUES(222, 56, "static", 1);
INSERT INTO choice VALUES(223, 56, "stat", 0);
INSERT INTO choice VALUES(224, 56, "const", 0);

-- 57
INSERT INTO question VALUES(57, 3, "Which of the following best describes member function overriding?", "ACTIVE");
INSERT INTO choice VALUES(225, 57, "Member functions having the same name in dericed class only", 0);
INSERT INTO choice VALUES(226, 57, "Memeber functions having the same name and different signature inside main function", 0);
INSERT INTO choice VALUES(227, 57, "Member functions having the same name in base and derived classes", 1);
INSERT INTO choice VALUES(228, 57, "Member functions having the same name in base class only", 0);

-- 58
INSERT INTO question VALUES(58, 3, "Which one is a template for creating different objects?", "ACTIVE");
INSERT INTO choice VALUES(229, 58, "Property", 0);
INSERT INTO choice VALUES(230, 58, "Names", 1);
INSERT INTO choice VALUES(231, 58, "Identity", 0);
INSERT INTO choice VALUES(232, 58, "Attributes", 0);

-- 59
INSERT INTO question VALUES(59, 3, "Which access specifier is usually used for data members of a class?", "ACTIVE");
INSERT INTO choice VALUES(233, 59, "Protected", 0);
INSERT INTO choice VALUES(234, 59, "Private", 1);
INSERT INTO choice VALUES(235, 59, "Public", 0);
INSERT INTO choice VALUES(236, 59, "Default", 0);

-- 60 
INSERT INTO question VALUES(60, 3, "Can abstract class have main() function defined inside it?", "ACTIVE");
INSERT INTO choice VALUES(237, 60, "Yes, depending on return type of main()", 1);
INSERT INTO choice VALUES(238, 60, "Yes, always", 0);
INSERT INTO choice VALUES(239, 60, "No, main must not be defined inside abstract class", 0);
INSERT INTO choice VALUES(240, 60, "No, because main() is not abstract function", 0);


-- 61
INSERT INTO question VALUES(61, 3, "Abstract classes can ____________________ instances.", "ACTIVE");
INSERT INTO choice VALUES(241, 61, "never have", 1);
INSERT INTO choice VALUES(242, 61, "always have", 0);
INSERT INTO choice VALUES(243, 61, "have array of", 0);
INSERT INTO choice VALUES(244, 61, "have pointer", 0);

